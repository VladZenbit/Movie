# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: CI/CD Prod Pipeline AWS
env:
  EB_PACKAGE_S3_BUCKET_NAME: ${{ secrets.PROD_EB_PACKAGE_S3_BUCKET_NAME }}
  EB_ENVIRONMENT_NAME: ${{ secrets.PROD_EB_ENVIRONMENT_NAME }}
  EB_APPLICATION_NAME: ${{ secrets.PROD_EB_APPLICATION_NAME }}
  AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.PROD_AWS_ECR_REGION }}
  VERSION_LABEL: '${{ github.sha }}-${{ github.run_number }}-${{ github.run_attempt }}'
  NODE_APP_NAME: 'backend_app_${{ github.sha }}.zip'

on:
  push:
    branches: ['main']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Create env file
        run: |
          cat <<EOF > ./.env
          NODE_ENV='production'
          PORT='5000'
          AWS_ACCESS_KEY_ID='${{ secrets.PROD_AWS_ACCESS_KEY_ID }}'
          AWS_SECRET_ACCESS_KEY='${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}'
          IMAGE_TAG='${{ github.sha }}'
          DB_TYPE='${{ secrets.PROD_DB_TYPE}}'
          POSTGRES_USER='${{ secrets.PROD_POSTGRES_USER}}'
          POSTGRES_DATABASE='${{ secrets.PROD_POSTGRES_DATABASE}}'
          POSTGRES_PASSWORD='${{ secrets.PROD_POSTGRES_PASSWORD}}'
          POSTGRES_HOST='${{ secrets.PROD_POSTGRES_HOST}}'
          POSTGRES_PORT='${{ secrets.PROD_POSTGRES_PORT}}'
          TYPEORM_LOGGING='${{ secrets.PROD_TYPEORM_LOGGING}}'
          TYPEORM_SYNC='${{ secrets.PROD_TYPEORM_SYNC}}'
          DROP_SCHEMA='${{ secrets.PROD_DROP_SCHEMA}}'
          RUN_MIGRATIONS='${{ secrets.PROD_RUN_MIGRATIONS}}'
          JWT_SECRET='${{ secrets.PROD_JWT_SECRET}}'
          ACCESS_TOKEN_VALIDITY_DURATION_IN_SEC='${{ secrets.PROD_ACCESS_TOKEN_VALIDITY_DURATION_IN_SEC}}'
          SESSION_SECRET='${{ secrets.PROD_SESSION_SECRET}}'
          CORS_ORIGIN='${{ secrets.PROD_CORS_ORIGIN}}'
          SECRET_TOKEN='${{ secrets.PROD_SECRET_TOKEN}}'
          DATABASE_URL: ${{secrets.PROD_DATABASE_URL}}
          DATABASE_SSL: ${{secrets.DATABASE_SSL}}
          EOF

      - name: Configure HTTPS security group rule
        run: |
          mkdir -p .ebextensions/
          echo 'Resources:' > .ebextensions/https-instance-securitygroup.config
          echo '  sslSecurityGroupIngress:' >> .ebextensions/https-instance-securitygroup.config
          echo '    Type: AWS::EC2::SecurityGroupIngress' >> .ebextensions/https-instance-securitygroup.config
          echo '    Properties:' >> .ebextensions/https-instance-securitygroup.config
          echo '      GroupId: { ''Fn::GetAtt'': [''AWSEBSecurityGroup'', ''GroupId''] }' >> .ebextensions/https-instance-securitygroup.config
          echo '      IpProtocol: tcp' >> .ebextensions/https-instance-securitygroup.config
          echo '      ToPort: 443' >> .ebextensions/https-instance-securitygroup.config
          echo '      FromPort: 443' >> .ebextensions/https-instance-securitygroup.config
          echo '      CidrIp: 0.0.0.0/0' >> .ebextensions/https-instance-securitygroup.config

      - name: Build & Zip roject
        run: |
          npm run build
          zip -r ${{ env.NODE_APP_NAME }} .

      - name: Configure AWS keys
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Copy deployment package to S3 bucket
        run: aws s3 cp ${{ env.NODE_APP_NAME }} s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME }}/

  deploy:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Configure AWS keys
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.EB_PACKAGE_S3_BUCKET_NAME }}",S3Key="${{ env.NODE_APP_NAME }}" \
          --version-label "Ver-${{ env.VERSION_LABEL }}" \
          --description "CommitSHA-${{ env.VERSION_LABEL }}"

      - name: Deploy new ElasticBeanstalk Application Version
        run: aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ env.VERSION_LABEL }}"

      - name: Wait untill Deploy is finished
        run: aws elasticbeanstalk wait environment-updated --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ env.VERSION_LABEL }}"

      - name: Print Success
        run: echo "CI/CD successfully finished!"
